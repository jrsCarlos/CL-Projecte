
// Generated from Asl.g4 by ANTLR 4.13.2


#include "AslLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct AslLexerStaticData final {
  AslLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AslLexerStaticData(const AslLexerStaticData&) = delete;
  AslLexerStaticData(AslLexerStaticData&&) = delete;
  AslLexerStaticData& operator=(const AslLexerStaticData&) = delete;
  AslLexerStaticData& operator=(AslLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag asllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<AslLexerStaticData> asllexerLexerStaticData = nullptr;

void asllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (asllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(asllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AslLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "ASSIGN", 
      "AND", "OR", "NOT", "EQUAL", "NE", "GT", "GE", "LT", "LE", "PLUS", 
      "MINUS", "DIV", "MUL", "MODULO", "VAR", "ARRAY", "OF", "INT", "FLOAT", 
      "BOOL", "CHAR", "IF", "THEN", "ELSE", "ENDIF", "WHILE", "DO", "ENDWHILE", 
      "FUNC", "ENDFUNC", "READ", "WRITE", "RETURN", "INTVAL", "TRUEVAL", 
      "FALSEVAL", "FLOATVAL", "CHARVAL", "ID", "STRING", "ESC_SEQ", "COMMENT", 
      "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "':'", "','", "'['", "']'", "';'", "'='", "'and'", 
      "'or'", "'not'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'+'", 
      "'-'", "'/'", "'*'", "'%'", "'var'", "'array'", "'of'", "'int'", "'float'", 
      "'bool'", "'char'", "'if'", "'then'", "'else'", "'endif'", "'while'", 
      "'do'", "'endwhile'", "'func'", "'endfunc'", "'read'", "'write'", 
      "'return'", "", "'true'", "'false'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "ASSIGN", "AND", "OR", "NOT", "EQUAL", 
      "NE", "GT", "GE", "LT", "LE", "PLUS", "MINUS", "DIV", "MUL", "MODULO", 
      "VAR", "ARRAY", "OF", "INT", "FLOAT", "BOOL", "CHAR", "IF", "THEN", 
      "ELSE", "ENDIF", "WHILE", "DO", "ENDWHILE", "FUNC", "ENDFUNC", "READ", 
      "WRITE", "RETURN", "INTVAL", "TRUEVAL", "FALSEVAL", "FLOATVAL", "CHARVAL", 
      "ID", "STRING", "COMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,50,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
  	6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
  	11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,
  	17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
  	28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
  	34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
  	36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,
  	39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,4,
  	41,259,8,41,11,41,12,41,260,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
  	43,1,43,1,43,1,44,4,44,275,8,44,11,44,12,44,276,1,44,1,44,4,44,281,8,
  	44,11,44,12,44,282,1,45,1,45,1,45,3,45,288,8,45,1,45,1,45,1,46,1,46,5,
  	46,294,8,46,10,46,12,46,297,9,46,1,47,1,47,1,47,5,47,302,8,47,10,47,12,
  	47,305,9,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,316,8,49,
  	10,49,12,49,319,9,49,1,49,3,49,322,8,49,1,49,1,49,1,49,1,49,1,50,4,50,
  	329,8,50,11,50,12,50,330,1,50,1,50,0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,85,43,87,44,89,45,91,46,93,47,95,48,97,0,99,49,101,50,1,0,7,2,0,39,
  	39,92,92,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,
  	8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,10,10,
  	13,13,3,0,9,10,13,13,32,32,342,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
  	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
  	0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
  	0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
  	1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
  	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
  	0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
  	1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
  	0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
  	0,93,1,0,0,0,0,95,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,
  	105,1,0,0,0,5,107,1,0,0,0,7,109,1,0,0,0,9,111,1,0,0,0,11,113,1,0,0,0,
  	13,115,1,0,0,0,15,117,1,0,0,0,17,119,1,0,0,0,19,123,1,0,0,0,21,126,1,
  	0,0,0,23,130,1,0,0,0,25,133,1,0,0,0,27,136,1,0,0,0,29,138,1,0,0,0,31,
  	141,1,0,0,0,33,143,1,0,0,0,35,146,1,0,0,0,37,148,1,0,0,0,39,150,1,0,0,
  	0,41,152,1,0,0,0,43,154,1,0,0,0,45,156,1,0,0,0,47,160,1,0,0,0,49,166,
  	1,0,0,0,51,169,1,0,0,0,53,173,1,0,0,0,55,179,1,0,0,0,57,184,1,0,0,0,59,
  	189,1,0,0,0,61,192,1,0,0,0,63,197,1,0,0,0,65,202,1,0,0,0,67,208,1,0,0,
  	0,69,214,1,0,0,0,71,217,1,0,0,0,73,226,1,0,0,0,75,231,1,0,0,0,77,239,
  	1,0,0,0,79,244,1,0,0,0,81,250,1,0,0,0,83,258,1,0,0,0,85,262,1,0,0,0,87,
  	267,1,0,0,0,89,274,1,0,0,0,91,284,1,0,0,0,93,291,1,0,0,0,95,298,1,0,0,
  	0,97,308,1,0,0,0,99,311,1,0,0,0,101,328,1,0,0,0,103,104,5,40,0,0,104,
  	2,1,0,0,0,105,106,5,41,0,0,106,4,1,0,0,0,107,108,5,58,0,0,108,6,1,0,0,
  	0,109,110,5,44,0,0,110,8,1,0,0,0,111,112,5,91,0,0,112,10,1,0,0,0,113,
  	114,5,93,0,0,114,12,1,0,0,0,115,116,5,59,0,0,116,14,1,0,0,0,117,118,5,
  	61,0,0,118,16,1,0,0,0,119,120,5,97,0,0,120,121,5,110,0,0,121,122,5,100,
  	0,0,122,18,1,0,0,0,123,124,5,111,0,0,124,125,5,114,0,0,125,20,1,0,0,0,
  	126,127,5,110,0,0,127,128,5,111,0,0,128,129,5,116,0,0,129,22,1,0,0,0,
  	130,131,5,61,0,0,131,132,5,61,0,0,132,24,1,0,0,0,133,134,5,33,0,0,134,
  	135,5,61,0,0,135,26,1,0,0,0,136,137,5,62,0,0,137,28,1,0,0,0,138,139,5,
  	62,0,0,139,140,5,61,0,0,140,30,1,0,0,0,141,142,5,60,0,0,142,32,1,0,0,
  	0,143,144,5,60,0,0,144,145,5,61,0,0,145,34,1,0,0,0,146,147,5,43,0,0,147,
  	36,1,0,0,0,148,149,5,45,0,0,149,38,1,0,0,0,150,151,5,47,0,0,151,40,1,
  	0,0,0,152,153,5,42,0,0,153,42,1,0,0,0,154,155,5,37,0,0,155,44,1,0,0,0,
  	156,157,5,118,0,0,157,158,5,97,0,0,158,159,5,114,0,0,159,46,1,0,0,0,160,
  	161,5,97,0,0,161,162,5,114,0,0,162,163,5,114,0,0,163,164,5,97,0,0,164,
  	165,5,121,0,0,165,48,1,0,0,0,166,167,5,111,0,0,167,168,5,102,0,0,168,
  	50,1,0,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,116,0,0,172,
  	52,1,0,0,0,173,174,5,102,0,0,174,175,5,108,0,0,175,176,5,111,0,0,176,
  	177,5,97,0,0,177,178,5,116,0,0,178,54,1,0,0,0,179,180,5,98,0,0,180,181,
  	5,111,0,0,181,182,5,111,0,0,182,183,5,108,0,0,183,56,1,0,0,0,184,185,
  	5,99,0,0,185,186,5,104,0,0,186,187,5,97,0,0,187,188,5,114,0,0,188,58,
  	1,0,0,0,189,190,5,105,0,0,190,191,5,102,0,0,191,60,1,0,0,0,192,193,5,
  	116,0,0,193,194,5,104,0,0,194,195,5,101,0,0,195,196,5,110,0,0,196,62,
  	1,0,0,0,197,198,5,101,0,0,198,199,5,108,0,0,199,200,5,115,0,0,200,201,
  	5,101,0,0,201,64,1,0,0,0,202,203,5,101,0,0,203,204,5,110,0,0,204,205,
  	5,100,0,0,205,206,5,105,0,0,206,207,5,102,0,0,207,66,1,0,0,0,208,209,
  	5,119,0,0,209,210,5,104,0,0,210,211,5,105,0,0,211,212,5,108,0,0,212,213,
  	5,101,0,0,213,68,1,0,0,0,214,215,5,100,0,0,215,216,5,111,0,0,216,70,1,
  	0,0,0,217,218,5,101,0,0,218,219,5,110,0,0,219,220,5,100,0,0,220,221,5,
  	119,0,0,221,222,5,104,0,0,222,223,5,105,0,0,223,224,5,108,0,0,224,225,
  	5,101,0,0,225,72,1,0,0,0,226,227,5,102,0,0,227,228,5,117,0,0,228,229,
  	5,110,0,0,229,230,5,99,0,0,230,74,1,0,0,0,231,232,5,101,0,0,232,233,5,
  	110,0,0,233,234,5,100,0,0,234,235,5,102,0,0,235,236,5,117,0,0,236,237,
  	5,110,0,0,237,238,5,99,0,0,238,76,1,0,0,0,239,240,5,114,0,0,240,241,5,
  	101,0,0,241,242,5,97,0,0,242,243,5,100,0,0,243,78,1,0,0,0,244,245,5,119,
  	0,0,245,246,5,114,0,0,246,247,5,105,0,0,247,248,5,116,0,0,248,249,5,101,
  	0,0,249,80,1,0,0,0,250,251,5,114,0,0,251,252,5,101,0,0,252,253,5,116,
  	0,0,253,254,5,117,0,0,254,255,5,114,0,0,255,256,5,110,0,0,256,82,1,0,
  	0,0,257,259,2,48,57,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,
  	260,261,1,0,0,0,261,84,1,0,0,0,262,263,5,116,0,0,263,264,5,114,0,0,264,
  	265,5,117,0,0,265,266,5,101,0,0,266,86,1,0,0,0,267,268,5,102,0,0,268,
  	269,5,97,0,0,269,270,5,108,0,0,270,271,5,115,0,0,271,272,5,101,0,0,272,
  	88,1,0,0,0,273,275,2,48,57,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,
  	1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,280,5,46,0,0,279,281,2,48,
  	57,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,
  	283,90,1,0,0,0,284,287,5,39,0,0,285,288,3,97,48,0,286,288,8,0,0,0,287,
  	285,1,0,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,290,5,39,0,0,290,92,1,
  	0,0,0,291,295,7,1,0,0,292,294,7,2,0,0,293,292,1,0,0,0,294,297,1,0,0,0,
  	295,293,1,0,0,0,295,296,1,0,0,0,296,94,1,0,0,0,297,295,1,0,0,0,298,303,
  	5,34,0,0,299,302,3,97,48,0,300,302,8,3,0,0,301,299,1,0,0,0,301,300,1,
  	0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,
  	305,303,1,0,0,0,306,307,5,34,0,0,307,96,1,0,0,0,308,309,5,92,0,0,309,
  	310,7,4,0,0,310,98,1,0,0,0,311,312,5,47,0,0,312,313,5,47,0,0,313,317,
  	1,0,0,0,314,316,8,5,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,
  	0,317,318,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,320,322,5,13,0,0,321,
  	320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,10,0,0,324,325,
  	1,0,0,0,325,326,6,49,0,0,326,100,1,0,0,0,327,329,7,6,0,0,328,327,1,0,
  	0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,
  	333,6,50,0,0,333,102,1,0,0,0,11,0,260,276,282,287,295,301,303,317,321,
  	330,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  asllexerLexerStaticData = std::move(staticData);
}

}

AslLexer::AslLexer(CharStream *input) : Lexer(input) {
  AslLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *asllexerLexerStaticData->atn, asllexerLexerStaticData->decisionToDFA, asllexerLexerStaticData->sharedContextCache);
}

AslLexer::~AslLexer() {
  delete _interpreter;
}

std::string AslLexer::getGrammarFileName() const {
  return "Asl.g4";
}

const std::vector<std::string>& AslLexer::getRuleNames() const {
  return asllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& AslLexer::getChannelNames() const {
  return asllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& AslLexer::getModeNames() const {
  return asllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& AslLexer::getVocabulary() const {
  return asllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AslLexer::getSerializedATN() const {
  return asllexerLexerStaticData->serializedATN;
}

const atn::ATN& AslLexer::getATN() const {
  return *asllexerLexerStaticData->atn;
}




void AslLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  asllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(asllexerLexerOnceFlag, asllexerLexerInitialize);
#endif
}
